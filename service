#!/usr/bin/python2.7
import time
import sys
import pytz
import threading #added
from websocket import create_connection #added
from datetime import datetime, timedelta
from calendar import timegm
from hosted import CONFIG, NODE

CONFIG.restart_on_update()

tz = pytz.timezone(CONFIG['timezone'])

def current_time():
    now = datetime.utcnow()
    timestamp = timegm(now.timetuple()) + now.microsecond / 1000000.
    return now, timestamp

def send_clock(now, ts):
    now = now.replace(tzinfo=pytz.utc)
    now = now.astimezone(tz)
    now = now.replace(tzinfo=None)

    since_midnight = (
        now -
        now.replace(hour=0, minute=0, second=0, microsecond=0)
    )
    since_midnight = since_midnight.seconds + since_midnight.microseconds / 1000000.

    monday = (now - timedelta(days = now.weekday())).replace(hour=0, minute=0, second=0, microsecond=0)
    since_monday = now - monday
    since_monday = since_monday.days * 86400 + since_monday.seconds + since_monday.microseconds / 1000000.
    
    NODE.send('/clock/since_midnight:%f' % since_midnight)
    NODE.send('/clock/since_monday:%f' % since_monday)
    NODE.send('/clock/human:%s' % now.strftime(CONFIG['time_fmt']))
    
	
def send_to_lua(text):
	bufSize = 1000
	length = len(text)
	chunksNumber = length // bufSize
	lastChunkSize = length % bufSize
	
	for i in xrange(chunksNumber):
		NODE.send('/socket/ticker:%s' % text[i*bufSize:(i+1)*bufSize])
	NODE.send('/socket/end:%s' % text[chunksNumber*bufSize:chunksNumber*bufSize + lastChunkSize])
	
def init_websocket():
    while True:
        try:
            url = "ws://kimeru-tick.inside.cactussoft.biz/ws/" + CONFIG['playeruid'] + "?"
            for source in CONFIG["sources"]:
                url += "sources=" + source["sourceid"] + "&"

            ws = create_connection(url[:-1])
            try:
                while True:
                    result = ws.recv()
                    send_to_lua(result)
            except Exception as ex:
                print(ex)
                ws.close()
        except Exception as ex1:
            print(ex1)
def main():
    thr = threading.Thread(target=init_websocket, args=(), kwargs={})
    thr.start() # Will run "foo"
    thr.is_alive() # Will return whether foo is running currently

    while 1:
        now, ts = current_time()
        if now.year < 2000:
            print >>sys.stderr, "too soon"
            time.sleep(1)
            continue

        send_clock(now, ts)
        time.sleep(0.5)

if __name__ == "__main__":
    main()